SQL 파싱 부하

파라미터 Driven 방식(바인드 변수)
id를 파라미터로 하나의 프로시저로 처리(여러개의 프로시저가 아닌)
-> 공유, 반복 재사용
(SQL과 실행계획)을 여러 개 캐싱하지 않고 하나를 반복 재사용하므로 파싱 소요시간과 메모리 사용량을 줄여준다. 궁극적으로, 시스템 전반의 CPU와 메모리 사용률을 낮춰 데이터베이스 성능과 확장성을 높이고, 특히 동시 사용자 접속이 많을 때는 그 효과성이 절대적이다. 

procedure LOGIN(login_id in varchar2) { … }
SELECT * FROM CUSTOMER WHERE LOGIN_ID = :LOGIN_ID(바인드변수);

실행계획을 라이브러리에 캐싱함으로 세션 반복 재사용
세션들은 캐시에서 실행계획을 얻어 입력 값만 새롭게 바인딩하면서 바로 실행

세션 <-> 캐시(실행계획+SQL 문장 저장)

최초 Parse Call이 발생한 시점에 라이브러리 캐시에서 커서를 찾지 못해 하드 파싱을 수행한 사실도 아래쪽 라이브러리 캐시 Miss 항목을 보고 알 수 있다

SQL 파싱 : SQL 문장을 구문 분석하여 실행 계획을 수립하는 과정
Parse Call : SQL 문장을 캐시에서 찾으려고 시도한 횟수

커서 : DB 시스템에서 결과집합을 처리, 조작하기 위해 사용되는 데이터 구조입니다. 커서를 이용하여 SQL 문장의 실행 결과에 접근하거나 조작할 수 있습니다.

결과 집합 : SQL 쿼리의 실행 결과로 반환되는 데이터의 집합

Misses in library cache during parse: 1
-> 캐시에서 찾지 못해 하드 파싱이 수행되었다
캐시 미스는 캐시에 요청한 데이터나 정보가 존재하지 않는 경우를 가리킵니다.

옵티마이저가 (균일한 데이터분포를 가지고 있다고 가정+통계정보)하고 실행계획을 짜는데 새로운 데이터 추가로 통계정보가 바뀌게 되면 실행계획도 바뀌게 될 수 있다.

"조건절(WHERE) 칼럼의 데이터 분포가 균일하다는 가정"은 옵티마이저가 조건절에 사용된 칼럼의 값들이 균일하게 분포되어 있다고 가정하는 것을 의미합니다. 즉, 데이터베이스에서 해당 칼럼의 값들이 특정 범위에 집중되지 않고 고르게 분포되어 있다고 가정합니다.

쿼리: SELECT * FROM Orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31';

시간이 흐르면서 새로운 주문 데이터가 추가되고, 주문일자의 분포가 이전과 다를 수 있습니다. 예를 들어, 처음에는 '2023-01-01'부터 '2023-03-31'까지의 주문이 균일하게 분포되어 있었지만, 이후에는 '2023-02-01' 주변에 주문이 몰리는 경향이 생겼다고 가정해봅시다.

변경 후
SELECT * FROM Orders WHERE 
    (OrderDate BETWEEN '2023-01-01' AND '2023-01-31')
    OR (OrderDate BETWEEN '2023-02-01' AND '2023-02-28')
    OR (OrderDate BETWEEN '2023-03-01' AND '2023-03-31');











































